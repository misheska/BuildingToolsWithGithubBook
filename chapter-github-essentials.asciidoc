[[github-essentials]]
== Github Essentials

Remember Github is not Git, and while you can certainly Git without
Github it just isn't the same.  This chapter is all about the
essential features of Github that make it worth using.  From the
unique approach to pull requests, to line-level commenting, to emoji,
this chapter explores the features that make GitHub GitHub.

Github adds a social layer atop Git which many have come to confuse
with Git itself.  For example, once you've used Github you'll be
comfortable with forks and pull requests, you'll see line-level and
commit-level comment threads as an expected feature of your SCM.
These "social" features of Github, the ability to map teams to
repositories, and the ability to use your SCM system as a way to
communicate with a group.  These are the features that make Github
indispensible, and very often you'll note that GitHub users mistake
these core features as core features of Git.  If you've ever used Git
without GitHub you'll understand the confusion as Git without GitHub
often feels underwhelming.

=== Repositories in GitHub

For many users the first impression of GitHub came via an open source
project - a Rails gem or a Javascript library someone had created and
published as a public repository. The first thing they likely noticed
about GitHub wasn't the source code as much as it was the
interface. Source Code Management (SCM) system have been around for
decades, but when GitHub arrived on the scene it changed the
relationship between a project's code, a project's community, and the
infrastructure supporting open source collaboration.   In this
section we explore some of these differences.


==== Don't Ask Permission, this is GitHub

The most important esssential idea to understand about Git and GitHub
is that it is truly decentralized. Decentralized applies to more than
just the mechanics of the source code management system it also
applies to the political structure that manage a project in Git or
GitHub.  With a DVCS you don't need to ask permission to fork a
repository and start commiting to your own branch.

Unlike other source code management systems you are also not beholden
to the original project owners. You can fork a project, customize it,
and then it is your prerogative to give back you changes to the
original project. GitHub makes it easy to create your own fork of a
repository and then track changes between your fork and the original
repository. 

Going beyond simply contributing back to the original project, as a Git
repository is a complete set of all changes made to the project since its 
inception, you could even take the project in an entirely new direction
without connection to the original upstream repository. Git makes it possible
for a project to take completely unexpected directions, which makes it
scary for anyone wanting complete control. But, as "information wants
to be free" this flexibility puts Git at an exciting crossroads where
new ideas can flourish independently of original intentions. In fact, this 
innate freedom (as in free speech) was what produced GitHub itself.

==== "Forking" a Repository

GitHub didn't invent the fork, but they did create a platform which
has elevated the concept and transformed it - a "fork" used to be
viewed as a negative in some OSS communities.  If you had to fork a
codebase it was because there was some intractable dispute or a schism
within a community.  Forking a project was often the result of a civil
war within the project's members. This is not the case at Github. In
fact, one sign of a project's health is how many forks of the project
there are.

===== Forking a Repository

To fork a repository, open up a GitHub repository in a browser and
then click on the "Fork" button as shown in the following figure.

image::images/github-fork.png[]

If you are a member of multiple organizations, you will then be asked
which organization or account you wish to fork a repository to.
Choose an account or organiztaion to continue.

Once you've forked a repository it will appear under your account with
a note that tells people what the upstream repository is (what
repository it was forked from). The following figure shows you a
forked tobrien/gradle repository from the gradle/gradle repository.
 
image::images/github-forked.png[]

===== Number of Forks as a Measure of Activity

The list of the most forked repositories on GitHub when this
section was originally written is a list of the most popular projects
on GitHub:

[cols=2, options="header"]
|===
|Project
|# of Forks

|Bootstrap
|16,091

|Spoon-Knife
|15,356

|homebrew
|6,219

|rails
|5,807

|html5-boilerplate
|4,756

|jquery
|4,084

|node
|3,931

|oh-my-zsh
|3,843

|hw3_rottenpotatoes
|3,775

|phonegap-start
|3,503
|====

This is because "forking" in GitHub is really just cloning someone
else's repository and creating a new downstream repository in your own
account.  When you fork someone else's repository, you have your own
copy in which you can create new feature branches and take the project
in whatever direction you would like.  You can think of the number of
forks as the number of interested (but maybe not active) contributors
for a project. If 16,091 people have forked the CSS and Javascript
framework Bootstrap, this means that 16,091 people are interested
enough in the project to create and maintain a separate fork of the
project. In each of the independent copies, developers can create
feature branches, and push commits. Eventually developers with their own
fork can even create a pull request asking the upstream repository maintainer to integrate changes back into the original repository.

A word of caution when looking at forks, however: forks on GitHub represent the lifetime count of forks, and as of right now, GitHub does not assign a value to recent forks over forks made long ago. As GitHub is a relatively new organization, most forks have been made recently, but as GitHub grows older, I imagine they will start to display an assessment of the age of a fork beyond just the fact that it was forked. Another way of saying this is that forks represent interest in a project at some point, but not whether that interest has waned at all.

==== Make a Pull Request

If you've forked a repository and made some changes on a feature
branch you can then make a pull request to the upstream repository.
Now while it is entirely possible with "git request-pull" to ask
someone to pull changes from a non-GitHub hosted Git repository, once
you've sent and received pull requests from within the GitHub
interface you'll wonder why anyone would ever want to do such a thing.

===== Making a Pull Request

If you've forked a repository and created a feature branch, GitHub
will notice this new feature branch and ask if you want to make a pull
request to the upstream repository with this branch.  When you make a
pull request, you are asking the upstream project to incorporate the
changes specific to your branch.  For example, the pull requests shown
in the following figures up the README.md file of the tobrien/gradle
repository in a branch named doc-improvements.  Here's what GitHub
shows me when it notices that I've just pushed commits to a feature branch.

image::images/github-recent-branch-prompt.png[]

If you click on compare, GitHub will compare the changes in this
branch with the default branch of the upstream repository.  In this
example, since the default branch of the upstream gradle/gradle
repository is master, the following figure shows a diff between
tobrien/tobrien:doc-improvement and gradle/gradle:master. This pull
request simply updates the README.md file of the project.

Click on Pull Request to make a pull request and fill out the
following form to send this request to the upstream project.

image::images/github-pull-request.png[]

===== Receiving a Pull Request

On the other side of a Pull Request you will see that a user made a
pull request in the GitHub interface.   Clicking on Pull Requests in
the top navigation of a repository will shows a list of requests
similar to that shown in the following figure.

image::images/github-pull-requests.png[]

You can comment on a pull request, you can reject a pull request, or
you can merge a pull request via the GitHub interface, or you can
cherry-pick specific commits from the command-line.   This mechanism
of pull requests is relevant for more than just open source projects.
With this mechanism you can implement a code-review system for a
private project. 

Some companies using GitHub take this model to an extreme, granting
most internal developer read-only privileges and requiring all changes
to be submitted to senior developers via pull requests. While this
approach may seem inappropriate to developers accustomed to having
read-write privileges to the repositories they work with, it does
enforce a requirement for code reviews in order to integrate new code
into master.

[NOTE]
===
Pull requests on GitHub are streamlined, available via the GitHub API, and used widely internally at GitHub for discussions and feature development. Not everyone loves the way GitHub built their web-enabled pull request mechanism. One such person is Linus Torvalds, the inventor of Git, who wrote `github throws away all the relevant information, like having even a
valid email address for the person asking me to pull. The diffstat is
also deficient and useless.` In a long thread, posted ironically on GitHub, Torvalds makes some comments about how the GitHub pull request workflow misses several critical elements, like signed identities. When you are dealing with a codebase as vital as Linux, you need to have high standards. For many people, fortunately, GitHub's pull requests are sufficient and get the job done.
===

==== GitHub Issues

Repository administrators have the ability to turn on GitHub issues
for a particular repository.  GitHub issues give you the ability to
track "issues" within the GitHub interface.  Issues can be bugs, new
features, ideas for new features, pull requests, or anything.

image::images/github-issues.png[]

[NOTE]
====
The industry has a excessive number of issue trackers: from Trac to
Jira to Bugzilla we've grown used to issue trackers which provide an
almost endless variety of options.  GitHub Issues is closer to Trac
than Jira, it emphasizes a sort of radical simplicity as far as issue
tracking is concerned.   You won't be defining custom workflow as you
would in a tool like JIRA, and you won't have the ability to create
custom graphs and reports.  GitHub issues is a simple issue tracker
designed to integrate with GitHub.
====

===== Creating an Issue

To create an issue click on "Issues" in the top-navigation of a
repository and then click on the "New Issue" button.   You'll see the
form shown in the following figure.

image::images/github-create-issue.png[]

Subject::
        Every issue can have a simple one-line subject. This subject
        serves to quickly identify an issue when this issue is
        displayed in a list of issues.

Body::
        Issues are useless unless they provide enough information and
        context to be implemented or addressed. The body of an issue
        is where you should describe the problem or idea fully.

Assigned To::
         You can assign an issue to a single GitHub user account that
         is associated with the project.

Milestone::
        If you have created milestones, you can associated a GitHub
        issue with a specific milestone.

Labels::
        GitHub uses labels to classify issues as bugs, enchancements,
        or questions. GitHub also gives you the opportunity to define
        more issues labels if you need them. You can create new labels
        for new issues types or labels for different components in a project.

===== GitHub Issue Milestones

Repositories are associated with milestones. Milestones are important
events such as software releases or other events which are related to
software development. In GitHub Issues you can create a milestone and
then associate issues with a milestone.  To create a milestone, click
on Issues in the top navigation area of a repository, then click on
the Milestones tab.   On the milestones tab click on "Create
Milestone" and fill out the interface shown in the following figure.

image::images/github-create-milestone.png[]

Once a milestone is created you can then see a list of open and closed
milestones. The following screen shows a long overdue, open milestone.

image::images/github-list-milestones.png[]

Clicking on a milestone lets you see the issues that are associated
with a milestone.

image::image/github-view-milestone.png[]

==== Tight integration with GitHub

The GitHub issues tracker is a good issues tracker on its own. Other issues trackers may have more overall features, but it is free and available for you to use, and has a feature set that competes with many issue trackers out there. 

Where the issue tracker really starts to shine is in the tight integration with the rest of GitHub. Once you have created issues for your project, you get these additions to your project automatically

* Automatic loading of issues comments when you reference an issue in a commit. If your commit message looks like "Addressing problem #54321" then GitHub will load a discussion view of the issues into that commit view.
* Automatic closing of issues from commit issues: if your commit message says "Closes #54321" then pushing that commit to GitHub will automatically close the issue in the issue tracker. GitHub supports aliases for closing issues, so you can use "fix" (or "fixes" or "fixed") and the same permutations of the word "close."
* Email support: issues are broadcast as notifications over email, in much the same way as other parts of GitHub broadcast notifications of events. You can respond to these emails and track the responses right inside the issue tracker.

==== Downloads

Repositories can expose downloads.

=== Users in Github

==== Github Teams

When you use a Github organization account you can group users into teams.

==== Github Organizations

An organization in Github is a way to organize repositories and group
users into teams.

==== @mention

When a user is mentioned in a commit or a comment...

=== Documentation in Github

==== Lightweight Markup: Markdown

Markdown, a lightweight markup language created by John Gruber and
Aaron Swartz, was the markup language of choice for Github for many
years.  Most project documentation was stored in Markdown, and it was
customary for developers to have a README.md file which would be
rendered as a Github project's default documentation.

Note: Recent developments have made Github markup language agnostic.
While Github once had a strong preference toward Markdown you can now
author Wiki content in Asciidoc, Creole, Mediawiki, Org-mode, Pod,
Rdoc, Textile, and reStructuredText.

==== Gollum - Github Wikis

Discuss Github's Wiki format.

==== Gists - Sharing Code 

Gists are...

