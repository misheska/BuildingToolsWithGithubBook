== Commit Status

- What this API does
- how it shows up in the UI (screenshot or two)
- Typical uses (CI)
- Atypical uses (CLA bot, others?)

Git repositories are essentially a series of commits.
Each commit contains quite a bit of information: the contents of the source files, who created the commit and when, the author's comments on what changes the commit introduces, and so on.
GitHub's commit-status API adds another layer of metadata to a commit: what various services _say_ about that commit.

This capability primarily shows itself in the pull-request UI, as shown in <<status_pr>>.
Each commit in the pull request is annotated with a symbol indicating its status - a red "&#xd7;" for failure or error, a green "&#x2713;" for success, or an amber "&#x2022;" for pending.
This feature also surfaces at the bottom of the pull-request; if the last commit in the branch is not marked as successful, you get a warning about merging the request. 

[[status_pr]]
.Commit status in the pull-request UI
image::images/commit-status-ui.png[Commit status in the pull-request UI]

As you'd expect, this is most useful for a continuous-integration service.
A program like Jenkins will get a notification when new commits are pushed to a branch, run a build/test cycle using the new code, and post the results through the commit-status API.
An application like this can even include a link back to the build results, so the user can find out which tests failed.

Building and testing is only the beginning, though.
Open-source projects often have a license agreement that you must sign in order to submit a contribution.
These are called "contributor license agreements," and usually contain language about licensing the contribution to the maintainers of the project.
But it's tedious to check every incoming pull request to see if the author has signed the CLA, so a continuous-integration-style service can be used for this.
CLAHub is one such example: it checks to see if all of the authors of the contained commits have signed the CLA, and marks the latest commit as "error" if not.

=== The API
==== Single statuses
==== Combined statuses

=== Let's write an app
==== Requirements
- Windows: Visual Studio
- Others: Xamarin Studio

==== Packages that will make this easy
- Nancy
- Octokit

==== Aside: OAuth
==== OAuth flow
==== Endpoint handlers

=== Summary

