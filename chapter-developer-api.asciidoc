[[developer-api]]
== The GitHub API
Like most useful sites and services today, GitHub is less a site that
you can visit and more a utility that has a habit of popping up just
about everywhere.  As this book has mentioned previously, GitHub has
been quickly becoming a "fixture" for developers.  If you develop in
Ruby, Node.js, and, increasingly, Java you are going to encounter
GitHub as the foundational SCM used by a number of leading projects
and libraries available for your language or platform.  

This ubiquitous presence continues to develop as GitHub's APIs have
started to mature and offer basic utilities for sites that need to
integrate with it. Just like you can sign on to many services with
your Facebook or Twitter logins, GitHub has started to act as an
OAuth 2 provider for many sites and services that depend on GitHub as
a provider of both user identity and Git activity. 

As more developer-focused sites start to offer the ability to "Login
with GitHub", and as GitHub continues to offer more low-level
infrastructure for development it changes from a simple service to a
necessary infrastructure for collaboration. In more than a few ways, GitHub is
to developers as Facebook is to social networks and the API is a
critical component of that transformation.

This chapter will supply three things: 

* A language-neutral overview of the GitHub API along with an
  explanation of basic interaction patterns and pointers toward more
  detailed information.
* A survey of libraries available to make interacting with the GitHub
  APIs easier.
* An exploration of intergration patterns for GitHub's OAuth
  services.

=== API Overview

An overview of the API with a diagram.

==== High-level Areas 

* Activity
* Gists
* Git Data
* Issues
* Orgs
* Pull Requests
* Repositories
* Users
* Search

==== How the Read the Github API Documentation

Just a pointing to the site with a quick overview of what everything
means.

==== Following the examples in this chapter

Discuss how this chapter uses Javascript examples

==== What are the Limitations of the Github API?

Discuss any limits on API usage.  Rate limits , etc.   What can the
API be used for, and what can it not be used for.   Try to translate
any licensing terms for this API into plainspeak.

=== API Security

How is a call to the API secured?

==== Unauthenticated Usage

Public usage of the API, briefly discuss any limitations for
unauthenticated usage.

==== Connecting as Yourself

Just describe simple authentication, how can you make calls to Github
as your own user.

==== Connecting as Someone Else (OAuth)

Reference the larger section on OAuth below.

=== API Libraries

There are already a number of API Libraries available for the Github
API.  This section lists some of the major languages along with some
of the options.

The first two sections of this chapter will deal with the official,
GitHub-maintained client libraries. GitHub maintains two official
libraries which are grouped under the name Octokit - a reference to
Github's Feline Octopus mascot "Octocat".  Octokit maintains two
projects on GitHub - octokit.rb and octokit.objc.

image::images/developer-api-octokit.png[]



==== Connecting to Github from Objective-C






==== Connecting to Github from Ruby

Just have a simple example using the most popular library.  Simple ,
then just some of the alternatives.

https://github.com/octokit/octokit.rb

gem install octokit

==== Connecting to Github from Javascript (Client-side)

Just have a simple example using the most popular library.  Simple ,
then just some of the alternatives.

The following example depends on jQuery, Underscore, and the gh3
Javascript library maintained by Philippe Charriere (GitHub: @k33g) at
GitHub here: https://github.com/k33g/gh3

To run the following example, download underscore-min.js from
http://underscorejs.org/ and gh3.js from https://github.com/k33f/gh3, and
place these files in the same directory as an HTML

----
<html>
  <head>
    <title>GitHub Client Side Example</title>

    <script type="text/javascript"
      src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js">
    </script>
    <script type="text/javascript" src="underscore-min.js"></script>
    <script type="text/javascript" src="gh3.js"></script>

    <script type="text/javascript">
      $(document).ready( function() {
        var tobrien = new Gh3.User("tobrien");
        tobrien.fetch(function (err, user){
          $('#id').append( user.id );
          $('#login').append( user.login );
          $('#blog').append( user.blog );
          $('#name').append( user.name );
        });
      });
    </script>
  </head>
  <body>
    <h1>GitHub User Information</h1>
    <ul>
      <li id="id">ID: </li>
      <li id="login">Login: </li>
      <li id="blog">Blog: </li>
      <li id="name">Name: </li>
    </ul>
  </body>
</html>
----

----
GitHub User Information

ID: 36787
Login: tobrien
Blog: http://www.discursive.com
Name: Tim O'Brien
----

==== Connecting to Github from Java

The Eclipse project's EGit project maintains a Java library named
egit-github which can be usd independently of Eclipse to interact with
the GitHub API.  The GitHub project page for this egit-github project
can be found here: https://github.com/eclipse/egit-github

If you are using Maven the dependency XML for egit-github is the
following XML dependency.

----
<dependency>
  <groupId>org.eclipse.mylyn.github</groupId>
  <artifactId>org.eclipse.egit.github.core</artifactId>
  <version>2.1.5</version>
</dependency>
----

----
package com.oreilly.github;

import org.eclipse.egit.github.core.Repository;
import org.eclipse.egit.github.core.client.GitHubClient;
import org.eclipse.egit.github.core.client.PageIterator;
import org.eclipse.egit.github.core.event.Event;
import org.eclipse.egit.github.core.service.EventService;
import org.eclipse.egit.github.core.service.RepositoryService;
import org.eclipse.egit.github.core.service.UserService;

public class App
{
    public static void main( String[] args ) throws Exception
    {
        GitHubClient client = new GitHubClient();
        EventService service = new EventService();
        PageIterator<Event> iterator = service.pageUserEvents("tobrien");

        for (Event event : iterator.next() )
          System.out.printf( "%s %s\n", event.getType(), event.getCreatedAt());
    }
}
----

----
WatchEvent Tue Aug 06 05:03:16 CDT 2013
CreateEvent Sun Jul 21 19:57:14 CDT 2013
IssuesEvent Mon Jun 03 09:33:51 CDT 2013
IssuesEvent Mon Jun 03 09:32:54 CDT 2013
PullRequestEvent Mon Jun 03 08:48:51 CDT 2013
CreateEvent Mon Jun 03 08:39:09 CDT 2013
MemberEvent Sun Jun 02 15:51:27 CDT 2013
MemberEvent Sun Jun 02 15:51:18 CDT 2013
MemberEvent Sun Jun 02 15:51:13 CDT 2013
CreateEvent Sun Jun 02 15:51:02 CDT 2013
PublicEvent Sun Jun 02 13:46:52 CDT 2013
----



==== Connecting to Github from Node.js
There is a popular node library that provides access to the GitHub API
developed by Mike de Boer (GitHub: @mikedeboer) this Node.js library
can be found on GitHub here: https://github.com/mikedeboer/node-github

To install the JavaScript GitHub API for Node.js.  Run the following
command with npm - the Node.js package manager:

----
npm install github
----

Once you've installed the github package, you can reference the GitHub
library in code like the following code listing.

----
var GitHubApi = require("github");
var prettyjson = require( 'prettyjson' );

var github = new GitHubApi({
    version: "3.0.0",
    timeout: 5000
});

github.events.getFromUser({
    user: "tobrien"
}, function(err, res) {
    console.log(prettyjson.render(res));
});
----

The code shown above connects to GitHub's API and requests recent
events related to the user "tobrien".  The result of the API call is
then printed out using a utility library named "prettyjson" which
ensures that the JSON output is transformed into something easier to
read. To run this code, you will need to run the following commands:

----
$ npm install github
$ npm install prettyjson
$ node github.js
----

Running this command should yield JSON output that contains a list of
events and actions the user 'tobrien' has recently completed.

For detailed document of Mike de Boer's JavaScript GitHub API, you can
read the full library documentation here:
http://mikedeboer.github.io/node-github/.

While the simple example shown above is sufficient for read-only
operations in the GitHub API, if you are planning on using this API
for anything more than reading GitHub content, you will need to
configure authentication options for this library.  A full discussion
of authentication with the JavaScript GitHub API for Node.js can be
found on the GitHub project page for this library here:
https://github.com/mikedeboer/node-github


==== Connecting to Github from a Billion Alternative Languages

Here is where you can have a list of the availablt APIs, but not a big
one.    We don't need to bother with langauges like Fortran 90.

=== Developing Github Applications

Building systems that interact with Github

===== Example Use-cases for Github Applications

* For discounts at business-affiliated services. (Publishers like O'Reilly Atlas, Prags, Pluralsight)

* For automation integration like Travis-CI

* For sign-in to credentialing services like [CoderWall](http://coderwall.com)

* For sign-in to reputation services like [StackOverflow](http://stackoverflow.com)

===== Authorizing Github Applications

When you develop an application that needs to make use of Github they
need to be authorized using an OAuth workflow...

===== How does OAuth Work?

 [OAuth](http://developer.github.com/v3/oauth/)

===== OAuth Libraries for Github

===== Ruby: Omniauth (with Devise)

Omniauth already has a OAuth provider for Github.

===== Python: ???

Todo: I know that Django has an OAuth provider API, ask a Pythonista.

===== Other Languages

Figure out if there are any other pre-built OAuth integrations (like omniauth)


==== How to call the API

* [API Documentation](http://developer.github.com)

===== Media Types

The content type for these requests and responses is almost always
JSON, but there's a special format required for the media type:
http://developer.github.com/v3/media/

===== This Chapter's Samples: Javascript

This chapter's samples are all written in Javascript, using a sample
web site that you can use over ...here...

===== Other Languages

Refer reader to this page; http://developer.github.com/v3/libraries/




=== A Sample Github Application

This section would build out a sample application.

=== Organization Applications

Registering an Organization's Application










