CHAPTER 10: CoffeScript, Hubot and the Activities API



                                  it "should tag the PR on GitHub if the user accepts", (done) ->
                                           Handler.accept( responder )
                                           expect( authenticate ).toHaveBeenCalled()

                                           expect( createComment ).toHaveBeenCalled()
                                           expect( responder.reply ).toHaveBeenCalled()
                                           done()

                                  it "should not tag the PR on GitHub if the user declines", (done) ->

                                           Handler.decline( responder )
                                           expect( authenticate ).toHaveBeenCalled()
                                           expect( createComment ).not.toHaveBeenCalledWith()
                                           expect( responder.reply ).toHaveBeenCalled()

                                           done()

                                  it "should decode the URL into a proper message object for the createMessage call", (done) ->
                                           url = "https://github.com/xrd/testing_repository/pull/1"
                                           msg = Handler.decodePullRequest( url )

                                           expect( msg.user ).toEqual( "xrd" )
                                           expect( msg.repository ).toEqual( "testing_repository" )
                                           expect( msg.number ).toEqual( "1" )
                                           done()


                                  it "should get the username from the response object", (done) ->
                                           res = { username: { name: "Chris Dawson" } }
                                           expect( Handler.getUsernameFromResponse( res ) ).toEqual "Chris Dawson"
                                           done()


                          Our tests will fail if we run them now. So, let’s write the code at the end of
                       our delegator extension. We need code which parses the URL into the appropri-

                       ate structured message object, code to put the reminder into the pull request
                       comment on GitHub and code which pulls the user out of the response object

                       passed to us. The first two of these are within reach; basic JavaScript and read-
                       ing the GitHub API binding documentation will get us to these two. The third

                       one requires a little more investigation, so we will leave this as a placeholder
                       for now.

                          To convert the URL into the object necessary for the createMessage   call,
                       we just need to split the message into pieces by the slash character, and then
                       retrieve the correct items by index. We probably could add some additional

                       tests which cover passing in empty strings, or other edge cases, but we’ll leave
                       it as an exercise to the reader (or you can review the final test cases on the asso-

                       ciated GitHub project page). Our code does not crash in these cases, but it
                       would be nice to have coverage of our expectations represented in our tests.


                          ...
                          _GITHUB = undefined
                          _PR_URL = undefined




       276