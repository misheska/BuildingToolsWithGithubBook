CHAPTER 7: Ruby and Jekyll


                              # puts "Title: #{title_for_filename}"
                              filename = "_posts/#{creation_date}-#{title_for_filename}.md"
                              File.open( filename, "w+" ) do |f|
                                f.write template
                              end

                            end

                            def run
                              100.times do |i|
                                get_ith_page( i )

                              end
                              100.times do |i|
                                if pages[i]
                                  write_post( pages[i] )
                                end

                              end
                            end

                            def process_creation_date( i, row )
                              location, creation_date = row.text().split /last updated on:/

                              creation_date.strip()
                            end

                            def process_location( i, row )
                              location, creation_date = row.text().split /last updated on:/


                              location.gsub!( /Concerning: /, "" )


                          We’ve modified theget_ith_page    method to save each page as a tuple (the
                       title and body) and then print them outfter processing inside trun method.


                          Our process body might look a little excessive. Why not just return the result
                          ofrow.text()  ? The reason is that markdown is very specific about the for-

                          mat it requires for text formatting. Each block of text separated by two new-
                          lines will be formatted with<p> tags. Unfortunately, Mechanize and Noko-

                          giri don’t return text formatted that way, so this function retrieves<p>ch
                          tag we scraped, strips whitespace from the ends, and then adds it back to a

                          body variable. If you scrape text from a site like we are doing here, you might
                          need to normalize the text in a similar way.


                          Do the same type of processing with the title. With this site there are occa-
                          sionally titles which include the word “Title:” in the title itself (authors have

                          to be forgiven for their own formatting quirks) so strip that out if we see it
                          there.







       142