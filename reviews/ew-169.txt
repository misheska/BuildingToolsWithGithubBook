                                                                                         Prerequisites


and as such, often miss subtle changes in APIs if your mocks are not synchron-
ized with the API itself, a cumbersome and error prone process. Calabash uses a
simple DSL for writing tests which is readable and elegant. Most importantly,

Calabash scripts are not compiled, so refactoring and changing tests does not
require the code and compile loop involved in writing tests using pure Java

with JUnit.
   Calabash also has a console mode which allows you to interactively refine

your tests. You jump into a console and query a running application using sim-
ple ruby commands. This is a powerful way to experiement with the calabash
ruby API and allows you to build tests quickly once you have determined the

correct code to use.
   Calabash makes testing easy; your code can be complicated, but tests

should not be an onerous task. Calabash test scripts do require more overhead
and take longer to run because they are instantiating and running a new app
for each test (unlike unit tests which can isolate a test to a small piece of code),

but you can mitigate the impact of this on your development flow by using con-
tinuous integration tools or using a service like AppThwack.com to run tests in

the cloud.
   Calabash runs using ruby. You already have ruby installed, so to install cala-

bash, run these commands:

   $ printf "source 'https://rubygems.org'\n\ngem 'calabash-android', '0.4.20'\ngem 'httparty'" >> Gemfile
   $ bundle install

   $ calabash-android gen

   The Gemfile  you just created should now look like this:


   source 'https://rubygems.org'

   gem 'calabash-android', '0.4.20'

   gem "httparty"

   Weâ€™ve also now installed calabash and created the folder structure to hold

our tests along with some helper scripts. The calabash-android gen      com-
mand will write out a default calabash feature file. This is boilerplate which we

should change, so make the file named    features/my_first.feature       look
like this:


   Feature: Login and post

     Scenario: As a valid user I can log into my app and post to my blog
       When I enter the username

       And I enter the password
       And I press button number 1




                                                                                         169