CHAPTER 10: CoffeScript, Hubot and the Activities API


                          3. Commit the content

                          4. Push the new branch into GitHub
                          5. Issue a pull request.

                          All of this can be automated using a combination of git commands and

                       cURL. We’ve seen some of these commands before and can reuse previous
                       command line invocations and variables that we used when generating our

                       webhook using the API via cURL. Our config variable is similar, but the required
                       fields in this case are the title and body for the pull request, the “head” key

                       which matches the name of the branch, and where to merge it to using the
                       “base” key.

                          Creating a new branch, adding some content and then issuing a pull request
                       against the branch might be something we need to do several (or more) times
                       as we experiment and learn about the Hubot extension API. The examples here

                       work right out of the box, but don’t be fooled into thinking that it all went ex-
                       actly as we expected the first time. Given that, these are commands you might

                       want to perform multiple times as you are experimenting, so let’s put the com-
                       mands described in the prior paragraph into a bash script that is generic and

                       can be run multiple times. We can call iissue-pull-request.sh      and place
                       the script inside the test directory.


                          # Modify these three variables
                          AUTH_TOKEN=b2ac1f43aeb8d73b69754d2fe337de7035ec9df7
                          USERNAME=xrd

                          REPOSITORY=test_repository

                          DATE=$(date "+%s")
                          NEW_BRANCH=$DATE
                          git checkout -b $NEW_BRANCH

                          echo "Adding some content" >> test-$DATE.txt
                          git commit -m "Adding test file to test branch at $DATE" -a
                          git push origin $NEW_BRANCH
                          CONFIG=$(echo '

                          { "title": "PR on '$DATE'",
                            "body" : "Pull this PR'$DATE'",
                            "head": "'$NEW_BRANCH'",
                            "base": "master"
                          }' )

                          URL=https://api.github.com/repos/$USERNAME/$REPOSITORY/pulls
                          curl -H "Authorization: token $AUTH_TOKEN" \
                          -H "Content-Type: application/json" -X POST -d "$CONFIG" "$URL"


                          This script generates a unique string based on the current time. It then cre-
                       ates and checks out a new branch based on that name, adds some content to a

                       unique file, commits it, pushes it into GitHub, and generates a pull request us-




       256