                                                                               Activities API Overview


   jasmine-node@2.0.0 node_modules/jasmine-node
   ├── minimist@0.0.8
   ├── underscore@1.6.0
   ├── mkdirp@0.3.5

   ├── walkdir@0.0.7
   ├── jasmine-growl-reporter@0.2.1 (growl@1.7.0)
   ├── coffee-script@1.7.1
   └── gaze@0.5.1 (globule@0.1.0)


   hubot-scripts@2.5.16 node_modules/hubot-scripts
   └── redis@0.8.4

   hubot@2.11.0 node_modules/hubot

   ├── readline-history@1.2.0
   ├── optparse@1.0.4
   ├── scoped-http-client@0.10.0
   ├── log@1.4.0
   ├── coffee-script@1.6.3

   └── express@3.18.1 (basic-auth@1.0.0, utils-merge@1.0.0,
   merge-descriptors@0.0.2, fresh@0.2.4, cookie@0.1.2, escape-html@1.0.1,
   range-parser@1.0.2, cookie-signature@1.0.5, vary@1.0.0,
   media-typer@0.3.0, parseurl@1.3.0, methods@1.1.0,
   content-disposition@0.5.0, depd@1.0.0, debug@2.1.1, commander@1.3.2,

   etag@1.5.1, proxy-addr@1.0.5, send@0.10.1, mkdirp@0.5.0, connect@2.27.1)
   ...
   $ ./node_modules/.bin/jasmine-node --coffee spec/


   .

   Finished in 0.009 seconds
   1 test, 1 assertions, 0 failures, 0 skipped


   Our tests pass and we now have a way to document and verify that our code
does what we think it does.


SETTING UP OUR WEBHOOK


We are now in a position to start adding the actual functionality to our Probot.
Our first requirement is to register for pull request events. We could do this

from within the GitHub website, but another way is to use the cURL tool to cre-
ate the webhook from the command line. In order to do this, we need to first

create an authorization token, and then we can use that token to create a web-
hook.

   To create the token, run this command, setting the proper variables for your
username instead of mine (“xrd”).







                                                                                       251