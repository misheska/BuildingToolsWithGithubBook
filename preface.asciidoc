[[preface]]
== Preface

* Git, What is it?



* Github, What is it?

GitHub 

* Tim's introduction

* Chris' introduction

* Audience for this book

This book should be an interesting source of information for people who have used Git or GitHub and want to "level-up" their skills related to these technologies. People without any experience using GitHub or Git will still find value in the topics of this book, but if you have not used either of these tools, you should have some at least some exposure to the software development world.

Much of the book focuses on the technical capabilities exposed by GitHub and the underlying Git architecture. Perhaps you feel constrained by using Git only from within a certain toolset; for example, if you are an Eclipse developer accidentally using Git to manage your Android source code and want to unlock Git in other places in your life as a developer, this book provides a wider vista to learn about the power of Git and GitHub. If you have fallen into using Git for your own projects and are now interested in using Git within a larger community, this book can teach you all about "social coding." This book provides a stepping stone for software developers who have used other distributed version control systems and are looking for a bridge to using their skills with Git and within a web service like GitHub. Like any seasoned developer, automation of your tools is important to you, and this book provides recipes for taking mundane tasks and converting them into automated services, and we show how to do this using a variety of languages talking to the GitHub API. This book provides a concise and directed approach to learning about the various features and tools offered by GitHub.

And, the bigger opportunity for readers of this book is to find a way to transform your coding experience using the "GitHub way." GitHub is phenomenom in the startup world, bootstrapping itself to 1.7M users before taking any investment, and this success came about in part from their distinct and vibrant culture. "GitHubbers" eat their own dog food by using the same tools they offer to their customers. These tools, like "pull requests" and "issues," stand in stark contrast and often replace tools other companies rely upon, like email. If you absorb not only the technical facets of using GitHub but also pay attention to the cultural and ideological changes offered behind the tools, you'll very likely see a new way of working in the modern age. We focus on these "meta" viewpoints as we discuss the tools themselves to help you see these extra opportunities.

This book will be interesting to people without a developer background, although there are sections which contain programming code. Much of the code is supported by a downloadable Git repository, so you can dig deeper at your own pace and only review the highlighted pieces noted in the book. If you are merely looking for an introduction to using GitHub without learning about developer-centric tools, then you might want to skip the section on the GitHub API. The other chapters do dive deeper into the technical background and architecture for developers, but the majorities of each chapter are generally accessible to non-developers. And, if you are a developer, you will definitely find more information than just high level overviews of the technologies at work on GitHub.com.

* Font Conventions

* Github Writing Conventions

* Downloading Code Examples

* Using Code Examples

* Safari Books Online

* How to Contact Us

* Acknowledgements
