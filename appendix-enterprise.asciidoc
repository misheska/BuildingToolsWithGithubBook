[appendix]
== GitHub Enterprise


Most people understandably equate GitHub (the company) with github.com (the website), but it's interesting to note that they're not one and the same.

The GitHub website, as important it is to modern open- and closed-source software development, is not the only product that GitHub (the company) produces.
The single largest other product from that team is called GitHub Enterprise, and it's a version of the GitHub software that can be deployed inside a corporate firewall â€“ like having your own private github.com.

The two products are very similar from a user point of view, but there are some important differences.
It can sometimes be hard to imagine the kinds of difficulties that Enterprise is designed to solve, but keep in mind it's for large teams.

=== Installation

Using GitHub Enterprise isn't as easy as signing up for an account.
You're responsible for all the infrastructure and maintenance, including installation, updates, system maintenance, keeping the machine running, and so on.
However, if your company is considering Enterprise, it's likely you already have specialists who are already doing this for other services.

The GitHub team has also made it pretty easy for them.
The software comes as a pre-packaged virtual machine in a variety of formats, so you'll likely find something that fits into your infrastructure.
Once the machine is running, most of the configuration can be done with a web interface, but there are some tricky bits like network configuration and port forwarding that aren't easy for the layperson to get right.

=== Administration

Since you're in control of the environment in which Enterprise runs, you now have a lot of concerns that the typical github.com user does not.
GitHub Enterprise has an administration interface for dealing with these issues, which doesn't exist on github.com.
It allows management of things like system resources, reports, search, and many others.

Also, while github.com has its own user system, GitHub Enterprise can optionally plug into your organization's existing authentication system.
This allows a company's IT organization to manage user identities in one single place, rather than having to duplicate a lot of effort when a new team member hires on.
It also eases the initial transition, when perhaps thousands of people will need new accounts.
Several systems are supported, including LDAP and SAML, as well as plain old email and password.

=== API

The complete GitHub API is also available on an Enterprise instance; you just need to send your requests to https://<hostname>/api/v3[] instead of https://api.github.com/[].
You can imagine that some users have accounts on both an Enterprise instance as well as github.com, and many applications have started supporting this scenario.

There's also a new API section that isn't available on github.com, called the Management Console API.
It allows you to do things like check settings, maintain SSH keys, manage your license, and so on.
Nearly anything you can do from the web management console, you can do through the API.

Documentation for this API is available at https://developer.github.com/v3/enterprise[].

=== Benefits

Most organizations run an enterprise edition of GitHub inside their
corporate firewall. This provides an extra, easy layer of security for
their information; without access to the corporate network, you cannot
reach the repository hosting service. 

=== Limitations

Management is the biggest issue: your team becomes responsible for
making sure your instance of GitHub is running and up to date. 

== Differences

There are a few subtle differences when using the regular GitHub.com
site and an enterprise instance.

=== Full Hostnames vs. Mount Points

One of the main differences between GitHub.com and an enterprise setup
is often in the way that hostnames are setup. GitHub.com has several
hostnames for various content served. An incomplete list includes:

* github.io: hosting Jekyll blogs for users and project pages
* gist.github.com: hosting "gists"
* raw.githubusercontent.com: hosting raw pages (unprocessed files)

For a variety of reasons, enterprise GitHub installations often don't
retain the same mapping. An enteprise installation might look like:

* github.bigdevcorp.example.com/pages/xrd/somerepo: hosting gh-pages sites
* github.bigdevcorp.example.com/gists: hosting gists

As you can see, enterprise installations often map the subdomains to a
subdirectory rather than a different hostname. This simplifies setup
of the enterprise installation. But it means that some tools require
reconfiguration. 

For the command line link:https://github.com/defunkt/gist[Gist tool]
(https://github.com/defunkt/gist), you need to export an environment 
variable which specifies the gist url:

[source,bash]
$ export GITHUB_URL=http://github.bigdevcorp.example.com/

For the command line link:https://github.com/github/hub[Hub tool]
(https://github.com/github/hub) you need to use a different
variable: "GITHUB_HOST".

[source,bash]
$ GITHUB_HOST=github.bigdevcorp.example.com hub clone myproject

=== Command Line Client Tools: cURL

We show in another chapter how to use cURL to make a request against
the API on the main GitHub.com site. If you wanted to do this against
an enterprise site, your request would look a little different:

[source,bash]
-----
$ curl -i https://github.bigdevcorp.example.com/api/v3/search/repositories?q=@ben
-----

=== Example request using a client library

If you use a client library, most provide a way
to configure the library to use a different endpoint, as is required
when you are using an enterprise GitHub instance. 

The ruby client configuration looks like this:

[source,ruby]
-----
github = Github.new 
           basic_auth: 'login:password',
       	   endpoint: 'https://github.bigdevcorp.example.com/api/v3/'
puts github.repos.list
-----

