== A Single Page App using the GitHub API with JavaScript

Now that you know the basics of the GitHub API, let's build something interesting with it. GitHub offers libraries which work within other programming languages and frameworks, and later we will talk about using the GitHub API on the server side. To start, however, let's build a single page app with everything hosted on GitHub and using the GitHub API. You've already learned about the gh-pages branch and now know about how the API works and we'll use that background knowledge as a foundation for this next chapter.

=== Using the GitHub API with JavaScript

This chapter focuses on using the GitHub API with client side JavaScript. JavaScript is the lingua franca of the web, invented in 2011 as a scripting language embedded inside the first web browsers. JavaScript has recently found its way to the server side as well with NodeJS, an innovative toolkit for building high performance network servers. JavaScript is a useful language to know no matter where your interests lie, whether they be on the server side or strictly client side development.

===== Building our coffee shop database

The Japanese have a word "otaku"; it describes a person obsessed with something, often computers or technology. Many software developers would happily call themselves otaku. Interestingly, in many of the software development shops where I have worked in Portland, there is an equally, almost disturbing, obsession with coffee. I suffer from the same malady, and it means I will drag my poor wife and infant son with me as I visit new cities, through the slime and filth of strange neighborhoods, just to find the perfect brew and complementary gluten free desserts. Google Maps is a great help with my quests, in that it will find me a coffee shop and reviews, but the granularity of information about that coffee shop is often poor and limited in scope. Let's fix that.

We'll build a coffee shop single page web app which allows us to search and filter for properties about a coffee shop. All files, such as the HTML, images and JavaScript will be hosted on GitHub. And, we'll be using the GitHub API to allow contributors to add data to our database, a database which we will also host on GitHub.

More specifically, we'll use these technologies:

* GitHub API JavaScript library:https://github.com/michael/github
* AngularJS: a superpowered framework for writing JS applications
* Bootstrap: a CSS library which simplifies building beautiful (or at
  least tolerable) webapps

You don't need to know these technologies in advance of working on this chapter.

===== Bootstrapping

To create our app, let's first create our main web page and push it into our repository.

[source,bash]
$ mkdir coffeete.ch
$ cd coffeete.ch
$ git init 
$ git checkout -b gh-pages
$ printf "<html>\n<body>Hello from CoffeeTe.ch</body>\n</html>\n" > index.html
$ git commit -m "Add starting point index.html" -a
$ git config push.default gh-pages

Notice that we created a new repository, and then created and entered the gh-pages branch. We'll do all our work there. And, by using the git config command, we specified that we want the default push branch to be gh-pages. This allows us to use `git push` to push our branch up instead of the longer `git push origin gh-pages`.

===== Mapping our site to a live hostname

As we discussed in the Jekyll chapter, once we publish these files
into GitHub inside a repository we can connect the repository to a
real hostname. There are two things to do:

* Add a CNAME file which tells GitHub under which server name this service should resolve. 
* Setup DNS records so that the hostname maps to the correct IP address at GitHub.

Imagine you have the hostname myspecialhostname.com. If you map this
repository to a subdomain called coffeetech, then you would do
something like this.

[source,bash]
$ echo 'coffeetech.myspecialhostname.com' > CNAME
$ git commit -m "Added CNAME mapping" -a
$ git push

Remember that you need to wait about ten minutes before GitHub regenerates their database to establish the connection between your gh-pages site and the mapping on their front end servers. But, this method of mapping the site is often quicker than setting up your own DNS, so if you are in a rush to play with this, try this method.

===== Adding the support libraries

As we mentioned we will use the GitHub.js library, AngularJS, and Bootstrap. Let's add those to our project now. Using whatever editor you prefer, edit the index.html file to look like this:

[source,html index.html]
<html>
<head>
<title>CoffeeTe.ch</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="stylesheet" type="text/css" href="bootstrap.min.css"></link>
</head>
<body ng-app>
<div class="container">
{{'Welcome to Coffeete.ch'}}
</div>
<script src="angular.js"></script>
<script src="github.js"></script>
</body>
</html>

Then, download the necessary files locally using these commands. We
include AngularJS, Bootstrap CSS, Underscore.js and Base64.js which
are support files required for Github.js, and GitHub.js.

[source,bash]
$ curl https://ajax.googleapis.com/ajax/libs/angularjs/1.2.7/angular.js
$ curl https://netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.min.css
$ curl https://github.com/michael/github/raw/master/github.js

I am assuming you have a firm grasp on most HTML concepts, but a few
of the advanced topics here:

* The `meta` tag makes our page work well with mobile browsers and
  complements the resposive features of Bootstrap.
* The `ng-app` attribute in the body tag tells AngularJS to initialize
  and compile our page from the body tag downward. 
* The `{{ }}` (double brackets) are an AngularJS two-way data binding
  directive. This sanity checks whether AngularJS is working for us;
  if we see "Welcome to Coffeete.ch" then we know AngularJS is loading
  and working properly.

===== Adding GitHub to our Single Page App

Now that we have our page setup, let's add some GitHub data to it.

Create a new file called `coffeetech.js` in the root of your repository

[source,javascript coffeetech.js]
var mod = angular.module( 'coffeetech', [] )
mod.controller( 'SampleCtrl', function( $scope ) {
  var github = new Github({} );
  var repo = github.getRepo( "gollum", "gollum" );
  $scope.$apply( function() { repo.show( function(err, repo) {
      $scope.repo = repo;
  })});
})

Add it to the repository

[source,bash]
$ git commit -m "Adding sample repository information JS controller" -a

Then, let's modify our `index.html` to utilize this new code

[source,html index.html]
<html>
<head>
<title>CoffeeTe.ch</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="stylesheet" type="text/css" href="bootstrap.min.css"></link>
</head>
<body ng-app="coffeetech">
<div class="container" ng-controller="SampleCtrl">
{{ repo | json }}
</div>
<script src="angular.js"></script>
<script src="github.js"></script>
<script src="coffeetech.js"></script>
</body>
</html>

Let's talk about these changes starting with the HTML file first.

We added or changed just three lines. In reverse geographic order, we
added a reference to our `coffeetech.js` file beneath our other JS
references. And, then we removed our databinding to the `Welcome to
CoffeeTech` string and replaced it with a binding to the variable
`repo` filtered by the JSON filter which is in our AngularJS
controller. Finally, we changed the `ng-app` reference to use the
module we defined in our `coffeetech.js` file.

If you have never used AngularJS before, you are probably thoroughly
confused about the `coffeetech.js` file. Before we dive into the
syntax, understand the following features of AngularJS, and then
you'll understand the significant problems solved by those same features:

* AngularJS utilizes something called two-way databinding. AngularJS
  solves the problem you have with building JS apps: marshalling data
  from your JS code into your HTML templates, marshalling data from
  your AJAX calls into your JS code and then marshalling that into
  your HTML templates. Marcia, Marcia, Marcia! Enough already; let's
  allow AngularJS to do this heavy lifting for us. To use it, we just
  define a variable on the AngularJS scope, and then place a reference
  to the scope in our HTML using the `{{ }}` databinding directives.
  In this case we set a variable called `repo` on our scope once we
  return from the show() method callback in the Github.js API call.
* Inspecting a JS object inside your webpage can be complicated; do
  you extract information from the object, put them into <div>s, doing
  all the marshalling we just realized is a royal pain in the lives of
  most modern JavaScript developers? If we are using AngularJS it does not
  have to be.
  AngularJS provides a filter which you can apply (using the pipe
  character) that produces a pretty printed object in your webpage. You
  see that with the `repo | json` code. `json` is a filter AngularJS
  provides by default.
* Many people see this kind of two way databinding and assume it
  cannot be performant, arguing that AngularJS must be polling the JavaScript
  objects to see changes. Not true! AngularJS is written in a smart
  way and only processes and changes the DOM when changes are noticed
  inside a digest cycle. If you put all your code properly into your
  scope, AngularJS will handle tracking changes for you. If you use a
  third party library which uses callbacks, like the Github.js library
  does, then you need to notify AngularJS that there has been a change
  by manually calling the $digest function on the $scope object once
  you have completed adding data to the scope.
* AngularJS allows you to break application functionality into
  isolated components which makes your application more testable. When
  we call `angular.controller` we are creating a controller which has
  functionality defined on it and encapsulated inside itself.

Now that we understand the benefits of using AngularJS, a few more
specifics about the implementation details of our `coffeetech.js`
file. 

* We create a new Github() object using the constructor. This
  constructor can take user credentials, but for now, we can just
  create it witout those.
* Once we have our `github` object, we call the method `getRepo()` with
  a owner and a name. This returns our repository object. To actually
  load the data for this repository object, we call the show method
  and pass it a callback which uses the two parameters `err` and
  `repo` to handle errors or otherwise provide us with details of the
  repository specified. In this case we are using the Gollum wiki
  public repository to display some sample data.

So, Github.js handles making the proper request to Github for us, and
AngularJS handles putting the results into our web page.

If you load this up in your browser, you will see something like this:

image::images/javascript-gollum.png[]

Yikes, that is a lot of data. AngularJS's JSON filter pretty printed
it for us, but this is a bit too much. Modify it to show just a few
pieces of information.

[source,html index.html]
<html>
<head>
<title>CoffeeTe.ch</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="stylesheet" type="text/css" href="bootstrap.min.css"></link>
</head>
<body ng-app="coffeetech">
<div class="container" ng-controller="SampleCtrl">
<div>Subscriber count: {{ repo.subscribers_count }}</div>
<div>Network count: {{ repo.network_count }}</div>
</div>
<script
src="angular.js"></script>
<script src="github.js"></script>
<script src="coffeetech.js"></script>
</body>
</html>

No we see something more palatable.

image::images/javascript-gollum-precise.png[]

We've just extracted the subscriber and network count from the gollum
repository hosted on GitHub using the GitHub API and placed it into
our single page app.

===== Visualize Application Data Structure

Now, let's build our application. First, consider how we
will structure our data. We are going to use GitHub as our data store.
GitHub is built on top of Git, a technology that could not be better suited for
storing content. However, there is a major difference between
accessing data stored inside a Git repository and a traditional database:
searchability. Git repositories are great for storing data, and
GitHub exposes storing data through their API. While Git itself
has many ways to search and retrieve data, the GitHub API does not
easily allow searching our repository data. Let's make sure to
design and store the data in a structured way so that we can search
it on the client side.

This application allows us to search coffee shops. These coffee shops
will be, for the most part, in larger cities. If we keep all the data 
stored as JSON files named after the city, we can keep data located in
a file named after the city, and then either use geolocation on the
client side to retrieve a set of the data, or ask the user to choose
their city manually.

First, add some data about coffee shops manually by creating the file
`portland.json`:

[source,json portland.json]
[ { "name" : "Heart Coffee", "lat" : 45.52292,  "lng" : -122.643074 },
{ "name" : "Crema", "lat" : 45.522181, "lng" : -122.63709 },
{ "name" : "Fresh Pot", "lat" : 45.520437, "lng" : -122.67846 } ]

Add and commit it

[source,bash]
$ git commit -m "Add Portland.json data" -a

Change our controller method to retrieve it:

[source,javascript coffeetech.js]
var mod = angular.module( 'coffeetech', [] )
mod.controller( 'ShopsCtrl', function( $scope ) {
  var github = new Github({} );
  var repo = github.getRepo( "xrd", "spa.coffeete.ch" ); # <1>
  repo.read( "gh-pages", "portland.json", function(err, data) { # <2>
    $scope.shops = JSON.parse( data ); # <3>
    $scope.$digest();
  }, false );
})

<1> Update the username and repository. If you are putting this into
your own repository, modify this appropriately.
<2> We now use the `read` method to pull file contents from the
repository. Notice we use the gh-pages branch since we are storing our
single page app and all the data there.
<3> Once our data is returned to us, it is simply a string. We need to
reconstitute this data back into a JavaScript object using the
`JSON.parse` method.

Now, let's expose it inside the `index.html` file like so:

[source,html index.html]
<html>
<head>
<title>CoffeeTe.ch</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="stylesheet" type="text/css" href="bootstrap.min.css"></link>
</head>
<body ng-app="coffeetech">
<div class="container" ng-controller="ShopsCtrl">
<div class="row" ng-repeat="shop in shops"> # <1>
<div class="col-md-6"> {{ shop.name }} </div>  # <2>
<div class="col-md-6"> {{ shop.lat }} {{ shop.lng }} </div> # <3>
</div>
</div>
<script
src="angular.js"></script>
<script src="github.js"></script>
<script src="coffeetech.js"></script>
</body>
</html>

<1> `ng-repeat` is an AngluarJS directive which iterates over an array
of items. Here we use it to iterate over the items in our
`portland.json` file and insert a snippet of HTML with our data
interpolated from each item in the iteration.
<2> We are now using Bootstrap to establish structure in our HTML. The
`col-md-6` class tells Bootstrap to build a column sized at 50% of our 12
column layout. We setup two adjacent columns this way. And, if we are 
inside a mobile device, it properly stacks these columns.
<3> Notice how we bind to data from the JSON file.

====== Errors Already?

If you run this in your browser, nothing will happen. Something is
broken. Let's investigate. I recommend using the Chrome browser to
debug this, but you can use any browser and set of developer tools you
like. They all have similar tools.

Pop over the browser tools, and jump to the console window. Refresh
the window, and you'll see this in the console:

[source,error]
Uncaught TypeError: Cannot call method 'select' of undefined 

If you click on the link to the right for github.js, you'll see this.

image::images/javascript-underscore-missing.png[]

You see at the point of error that we are calling select on tree. What
is happening under the hood of this library is that we are
pulling the entire tree from the repository, then iterating over each
item in the tree, then 
selecting the item from the tree which matches the name of the
file we have requested. This is a performance implication we should at
least consider. If we look at the "Network" tab in the Chrome
Developer tools, and then click on the last item in the list, we see a
reference to a URL something like
`https://api.github.com/repos/xrd/spa.coffeete.ch/git/trees/gh-pages?recursive=true&1389996312519`

image::images/javascript-get-tree.png[]

The iteration is done using underscore (we can see an
the underscore character as the object of the `select` method), and it looks like this is
failing because the '_' is undefined. 

When I first wrote this, I had not seen the reference to underscore.js
noted as a requirement of using github.js. Github.js also requires
base64.js. To include these, run these commands from the console:

[source,bash]
$ curl http://underscorejs.org/underscore-min.js
$ curl https://raw.github.com/dankogai/js-base64/master/base64.min.js

Then, make your index.html look like this:

[source,html index.html]
<html>
<head>
<title>CoffeeTe.ch</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="stylesheet" type="text/css" href="bootstrap.min.css"></link>
</head>
<body ng-app="coffeetech">
<div class="container" ng-controller="ShopsCtrl">
<div class="row" ng-repeat="shop in shops"> # <1>
<div class="col-md-6"> {{ shop.name }} </div>  # <2>
<div class="col-md-6"> {{ shop.lat }} {{ shop.lng }} </div> # <3>
</div>
</div>
<script
src="angular.js"></script>
<script src="underscore.js"></script>
<script src="base64.js"></script>
<script src="github.js"></script>
<script src="coffeetech.js"></script>
</body>
</html>

===== Safely implementing login

If I saw this app in the wild and knew nothing about the authors, I
would never use it to submit data. The app asks for my GitHub username
and password. Given that I usually assign a random password which I
have no hope of remembering, it is almost impossible that I could
authenticate at all. Additionally, and more importantly, asking for my
username and password implicitly asks me to trust the authors of this
application. Trust in this case means that I trust them to not
maliciously use my credentials for nefarious purposes, and also asks
me to trust that they are not doing something stupid which would allow
an attacker  to insert themselves into the middle of the
authentication process and steal my crendentials. It seems like every
day we hear of a break-in at a major internet service; I want to believe that most people are out to do good in the world, so I am less worried about the provider of such a service maliciously stealing my crendentials, but I am worried about a script kiddie attacking the service for fun and stealing my crendentials. At any rate, I would never use a service which requires me to give up my username and password to another service, especially one which is as important as GitHub is to me.

So, let's use oAuth instead and resolve these problems.

If we use oAuth, we enter our credentials directly into GitHub. We can take advantage of 2-factor authentication. Once we have entered our credentials, GitHub decides whether we are who we say we are, and then returns us to the application which requested access. And, GitHub provides the application with what is called an oAuth token that encapsulates exactly what services on GitHub we have access to, and whether that access is read-only or whether we can add data in a read-write manner. This means our requesting service can ask to modify only parts of our data within GitHub; this provides a much higher level of trust to users as they know the application cannot touch the more private parts within GitHub. Specifically, this means we could ask for access only to gists and not request access to our repositories, for example. And, finally, one important point about oAuth tokens is that they can be revoked. So, once a specific action has been taken, we can destroy the token and revoke access. With simple username and password access, the only way to revoke access is to change the password, which means any place you have saved that password (password managers or other applications which login via username and password) need to update their settings as well. With oAuth we can revoke a single token at any time (and GitHub makes it easy to do this) without affecting access to other services.

==== Everything on GitHub, except for one piece

We would like to host everything on GitHub, but sadly there is one piece which we cannot host there: the authentication component. 
Somehow we need to safely authenticate our user into the GitHub and retrieve an oAuth token. There is currently no way to do this 
strictly client side (using only static HTML and JavaScript running in the browser). 

Instead, we will delegate authentication to Firebase. Firebase is a real time communication toolset which integrates
well with our choice of AngularJS. Delegation of our authentication
component is easy with Firebase: we just create a GitHub application,
provide the credentials and GitHub oAuth scope to Firebase, and then our
application offloads user management to Firebase. 

To start, we need to create a new GitHub application.

===== Our own NodeJS Application

Why not: requires a hosting provider, like Nodejitsu. Not too complicated, but
do we want to do devops?

[source,javascript package.json]
----
{
  "name": "spa-auth",
  "description": "Single Page Authentication System for GitHub",
  "version": "0.1",
  "homepage": "https://github.com/xrd/spa.coffeete.ch/",
  "author": "Chris Dawson <xrdawson@gmail.com>
  (https://github.com/xrd/)",
  "dependencies": {
    "everyauth": "0.4.5"
  },
}
----

[source,javascript app.js]
----
var everyauth = require('everyauth')
  , connect = require('connect');

everyauth.github
  .appId('client_id')
  .appSecret('client_secret')
  .findOrCreateUser( function (session, accessToken, ,
  accessTokenExtra, githubUserMetadata) {
    // find or create user logic goes here
  })
  .redirectPath('/');

var routes = function (app) {
  // Define your routes here
};

connect(
    connect.bodyParser()
  , connect.cookieParser()
  , connect.session({secret: 'whodunnit'})
  , everyauth.middleware()
  , connect.router(routes);
).listen(3000);

----

===== Firebase App

By far the simplest option.


===== Advanced

We want to make our webapp as fast as possible. So, let's do some minimization of the assets.

[source,bash]
