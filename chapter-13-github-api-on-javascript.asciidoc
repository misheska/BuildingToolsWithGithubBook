==== Single Page Apps using the GitHub API

Now that you know the basics of the GitHub API, let's build something interesting with it. GitHub offers libraries which work within other programming languages and frameworks, and later we will talk about using the GitHub API on the server side. To start, however, let's build a single page app with everything hosted on GitHub and using the GitHub API. You've already learned about the gh-pages branch and now know about how the API works and we'll use that background knowledge as a foundation for this next chapter.

===== Using the GitHub API with JavaScript

This chapter focuses on using the GitHub API with client side JavaScript. JavaScript is the lingua franca of the web, invented in 2011 as a scripting language embedded inside the first web browsers. JavaScript has recently found its way to the server side as well with NodeJS, an innovative toolkit for building high performance network servers. JavaScript is a useful language to know no matter where your interests lie, whether they be on the server side or strictly client side development.

===== Building our coffee shop database

The Japanese have a word "otaku"; it describes a person obsessed with something, often computers or technology. Many software developers would happily call themselves otaku. Interestingly, in many of the software development shops where I have worked in Portland, there is an equally, almost disturbing, obsession with coffee. I suffer from the same malady, and it means I will drag my poor wife and infant son with me as I visit new cities, through the slime and filth of strange neighborhoods, just to find the perfect brew and complementary gluten free desserts. Google Maps is a great help with my quests, in that it will find me a coffee shop and reviews, but the granularity of information about that coffee shop is often poor and limited in scope. Let's fix that.

We'll build a coffee shop single page web app which allows us to search and filter for properties about a coffee shop. All files, such as the HTML, images and JavaScript will be hosted on GitHub. And, we'll be using the GitHub API to allow contributors to add data to our database, a database which we will also host on GitHub.

More specifically, we'll use these technologies:

* GitHub API JavaScript library:https://github.com/michael/github
* AngularJS: a superpowered framework for writing JS applications
* Bootstrap: a CSS library which simplifies building beautiful (or at least tolerable) webapps

===== Bootstrapping

To create our app, let's first create our main web page and push it into our repository.

[source,bash]
$ mkdir coffeete.ch
$ cd coffeete.ch
$ git init 
$ git checkout -b gh-pages
$ echo "<html><body>Hello from CoffeeTe.ch</body></html>" > index.html
$ git commit -m "Add starting point index.html" -a
$ git config push.default gh-pages

Notice that we created a new repository, and then created and entered the gh-pages branch. We'll do all our work there. And, by using the git config command, we specified that we want the default push branch to be gh-pages. This allows us to use `git push` instead of the longer `git push origin gh-pages`.

===== Everything on GitHub, except for one piece

We would like to host everything on GitHub, but sadly there is one piece which we cannot host there: the authentication component. Somehow we need to safely authenticate our user into the GitHub and retrieve an oAuth token. There is currently no way to do this strictly client side (using only static HTML and JavaScript running in the browser). So, we need to have a tiny server side component which handles the authentication and then provides the auth token to the GitHub hosted components. We'll write this in JavaScript as a NodeJS application running on NodeJitsu.

===== Advanced

We want to make our webapp as fast as possible. So, let's do some minimization of the assets.

[source,bash]
