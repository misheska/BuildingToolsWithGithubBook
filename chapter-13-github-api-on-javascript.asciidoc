==== Single Page Apps using the GitHub API

Now that you know the basics of the GitHub API, let's build something interesting with it. GitHub offers libraries which work within other programming languages and frameworks, and later we will talk about using the GitHub API on the server side. To start, however, let's build a single page app with everything hosted on GitHub and using the GitHub API. You've already learned about the gh-pages branch and now know about how the API works and we'll use that background knowledge as a foundation for this next chapter.

===== Using the GitHub API with JavaScript

This chapter focuses on using the GitHub API with client side JavaScript. JavaScript is the lingua franca of the web, invented in 2011 as a scripting language embedded inside the first web browsers. JavaScript has recently found its way to the server side as well with NodeJS, an innovative toolkit for building high performance network servers. JavaScript is a useful language to know no matter where your interests lie, whether they be on the server side or strictly client side development.

===== Building our coffee shop database

The Japanese have a word "otaku"; it describes a person obsessed with something, often computers or technology. Many software developers would happily call themselves otaku. Interestingly, in many of the software development shops where I have worked in Portland, there is an equally, almost disturbing, obsession with coffee. I suffer from the same malady, and it means I will drag my poor wife and infant son with me as I visit new cities, through the slime and filth of strange neighborhoods, just to find the perfect brew and complementary gluten free desserts. Google Maps is a great help with my quests, in that it will find me a coffee shop and reviews, but the granularity of information about that coffee shop is often poor and limited in scope. Let's fix that.

We'll build a coffee shop single page web app which allows us to search and filter for properties about a coffee shop. All files, such as the HTML, images and JavaScript will be hosted on GitHub. And, we'll be using the GitHub API to allow contributors to add data to our database, a database which we will also host on GitHub.

More specifically, we'll use these technologies:

* GitHub API JavaScript library:https://github.com/michael/github
* AngularJS: a superpowered framework for writing JS applications
* Bootstrap: a CSS library which simplifies building beautiful (or at least tolerable) webapps

You don't need to know these technologies in advance of working on this chapter.

===== Bootstrapping

To create our app, let's first create our main web page and push it into our repository.

[source,bash]
$ mkdir coffeete.ch
$ cd coffeete.ch
$ git init 
$ git checkout -b gh-pages
$ echo "<html><body>Hello from CoffeeTe.ch</body></html>" > index.html
$ git commit -m "Add starting point index.html" -a
$ git config push.default gh-pages

Notice that we created a new repository, and then created and entered the gh-pages branch. We'll do all our work there. And, by using the git config command, we specified that we want the default push branch to be gh-pages. This allows us to use `git push` to push our branch up instead of the longer `git push origin gh-pages`.

===== Mapping our site to a live hostname

As we discussed in the Jekyll chapter, to connect this site to a real hostname, we need to do two things:

* Add a CNAME file which tells GitHub under which server name this service should resolve. 
* Setup DNS records so that the hostname maps to the correct IP address at GitHub.

If you want to use your own hostname (perhaps one you purchased and are not using), go right ahead. And, for the purposes of this book, we've setup *.oreilly.coffeete.ch as a wildcard CNAME, so that you can simply push up a CNAME file with your GitHub username plus .oreilly.coffeete.ch. So, for me, my domain would be xrd.oreilly.coffeete.ch. If you want to use one of these domains, just set the CNAME file contents to be that, and push it up.

[source,bash]
$ echo 'xrd.oreilly.coffeete.ch' > CNAME
$ git commit -m "Added CNAME mapping" -a
$ git push

Remember that you need to wait about ten minutes before GitHub regenerates their database to establish the connection between your gh-pages site and the mapping on their front end servers. But, this method of mapping the site is often quicker than setting up your own DNS, so if you are in a rush to play with this, try this method.

And, once the CNAME file is posted to GitHub, we need to

===== Safely implementing login

If I saw this app in the wild and knew nothing about the authors, I would never use it to submit data. The app asks for my GitHub username and password. Given that I usually assign a random password which I have no hope of remembering, it is almost impossible that I could authentication. Additionally, and more importantly, asking for my username and password implicitly asks me to trust the authors of this application. Trust in this case means that I trust them to not maliciously use my credentials for nefarious purposes, and also asks me to trust that they are not doing something stupid which would allow an attacker to insert themselves into the middle of the authentication process and steal my crendentials. It seems like every day we hear of a break-in at a major internet service; I want to believe that most people are out to do good in the world, so I am less worried about the provider of such a service maliciously stealing my crendentials, but I am worried about a script kiddie attacking the service for fun and stealing my crendentials. At any rate, I would never use a service which requires me to give up my username and password to another service, especially one which is as important as GitHub is to me.

So, let's use oAuth instead and resolve these problems.

If we use oAuth, we enter our credentials directly into GitHub. We can take advantage of 2-factor authentication. Once we have entered our crendetials, GitHub decides whether we are who we say we are, and then returns us to the application which requested access. And, GitHub provides the application with what is called an oAuth token that encapsulates exactly what services on GitHub we have access to, and whether that access is read-only or whether we can add data in a read-write manner. This means our requesting service can ask to modify only parts of our data within GitHub; this provides a much higher level of trust to users as they know the application cannot touch the more private parts within GitHub. Specifically, this means we could ask for access only to gists and not request access to our repositories, for example. And, finally, one important point about oAuth tokens is that they can be revoked. So, once a specific action has been taken, we can destroy the token and revoke access. With simple username and password access, the only way to revoke access is to change the password, which means any place you have saved that password (password managers or other applications which login via username and password) need to update their settings as well. With oAuth we can revoke a single token at any time (and GitHub makes it easy to do this) without affecting access to other services.

===== Everything on GitHub, except for one piece

We would like to host everything on GitHub, but sadly there is one piece which we cannot host there: the authentication component. Somehow we need to safely authenticate our user into the GitHub and retrieve an oAuth token. There is currently no way to do this strictly client side (using only static HTML and JavaScript running in the browser). So, we need to have a tiny server side component which handles the authentication and then provides the auth token to the GitHub hosted components. We'll write this in JavaScript as a NodeJS application running on NodeJitsu.

===== Advanced

We want to make our webapp as fast as possible. So, let's do some minimization of the assets.

[source,bash]
