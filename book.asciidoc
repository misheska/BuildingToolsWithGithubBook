= The GitHub Book

== Preface

* Git, What is it?

* Font Conventions

* Github Writing Conventions

* Downloading Code Examples

* Using Code Examples

* Safari Books Online

* How to Contact Us

* Acknowledgements

== Chapter 1: Bootstrapping Git

* A (Very) Brief Introduction to Git

  ** History of Git

    *** BitKeeper and Linux Breakup
    *** Torvalds Creates Git
    *** Enter Github, Stage Left...

  ** The Distributed Revolution

    *** Decentralized Collaboration
    *** Asynchronous Collaboration
    *** DVCS usage patterns - https://github.com/zkessin/dvcs-workflows

  ** Why Git?

    *** Git Features
    *** Popularity in Open Source
    *** Popularity in the Enterprise
    *** Summary Comparisons to Alternatives

* Installing Git

  ** Windows

    *** Git Client 
      **** PowerShell vs Git Bash
    *** GitHub for Windows

  ** Mac

    *** Git Client
    *** GitHub for Mac

  ** Linux

    *** Git Client

* Git Usage Basics

  ** Git Cheat Sheet

* Comprehensive List of Git Clients (short description and link)

  ** IDE Integration with Git: _Note: this is just a list with, more detail in the Clients chapter_

    *** Eclipse
    *** IntelliJ
    *** Rubymine
    *** XCode
    *** Netbeans
    *** Visual Studio

  ** Alternative GUI Clients: _Note: this is just a list, more detail in the Clients chapter_

    *** Tower
    *** Gitbox
    *** GitX (L)
    *** Git Extensions
    *** SourceTree
    *** git-cola
    *** gitk
    *** SmartGit

* Where to learn more about Git

== Chapter 2: Getting Started with Github

* What is Github?

  ** A (Very) Brief History of Github

  ** Essential Features: What makes Github, Github?

    *** Team Management

    *** Code Review

    *** Public/Private Project Hosting

    *** Open Source Collaboration

* Collaboration for code

  ** An SCM does not a community create

  ** How to Scale Open Source

    *** Remove Barriers to Participation

      **** Sidebar: Quote from Apache Contributor fighting for Github

    *** Encourage Forking

      **** Sidebar: Is Forking "anti-community"?

    *** Provide a Platform for Code Review

    *** Platform for Decentralized Collaboration

* Collaboration for other creative endeavors

  ** Github for Graphic Designers

  ** Github for Writers

  ** Github for Musicians

  ** Github for Legislators

  ** Github for Makers (Hardware)

* Alternatives to Github

  ** Can you Git without Github?

  ** Hosted

    *** Gitorious (https://gitorious.org/)
    *** Bitbucket (https://bitbucket.org/)

  ** On-premise

    *** Github Enterprise (https://enterprise.github.com/)
    *** GitlabHQ (http://gitlabhq.com/)
    *** Gitorious (https://gitorious.org/)
    *** Gitblit (http://gitblit.com/)

== Chapter 3: Creating a Github Account

* Selecting a GitHub Plan

  ** Types of Github Plans

    *** Free

    *** Personal

    *** Organization

* Setting Up Your Accounts

  ** User Accounts versus Organization Accounts

  ** Signing up for your User Account

  ** Account Security

    *** SSH vs HTTPS

  ** Setting up an Organization Account


== Chapter 5: Github Essentials

* Useful GitHub-specific Terms

  ** Pull Request

  ** Fork

  ** Team

  ** Organization

  ** GitHub Flavored Markdown

    *** Emoji

    *** Markdown

  ** GitHub Pages

  ** Wikis

  ** @mention

  ** Issues

  ** Milestones

  ** Gist


== Chapter 5: Github for Open Source Developers

Cover some of the basic use cases for an open source project both from
the perspective of a project maintainer and a project participant.

== Chapter 6: Github at Work

How to use Github on a private project at work.  Hwo to integrate
Github with internal issue tracking systems.

== Chapter 7: Github is for Writing

Discuss the several markdown formats Github supports in some detail.

Compare and contrast these markdown formats.

Discuss two approaches: README.md files and Project Wikis

Discuss Project Wikis in Details

Explore the Gollum project

== Chapter 8: Github is for Sharing

Dive into Gists



== Chapter 9: Managing Your User Account

* Overview of the User Dashboard

* Your User Profile

  ** Password Security

  ** Gravatar

  ** Email Addresses

  ** What is a "Verified" email?

  ** Notifications

  ** Billing

  ** Payment History

  ** SSH Keys

  ** When should I use SSH?

  ** Security History

  ** Applications

  ** What is OAuth?

  ** Authorized Applications

  ** GitHub Applications

  ** Repositories

  ** Private vs Public

  ** Organizations

_AO: I think an overview of all these elements of the dashboard is good, but when do you discuss use cases, which show how these things are valuable and how they're being used to enhance development by users now? That's the kind of meaty advice that makes people buy a book._


== Chapter 10: Managing Your Organization Account

* Overview of the Organization Dashboard

* The Organization Profile

  ** Organization Account Security

  ** Gravatar

  ** Billing

  ** Payment History

  ** Security History

  ** Applications _AO: I bet managmeent of applications is a topic worth highlighting somewhere, with lots of use cases as with the dashboard._

  ** [User and Permission Grouping](http://vimeo.com/35539203)

  ** Owners

  ** Members

  ** Teams

    *** Permissions

    *** Members

    *** Repositories

== Chapter 11: Overview of a Repository Dashboard

* The GitHub Command Bar

  ** Any GitHub page, then `s` key.

* Launch Page

  ** https://github.com/launch

== Chapter 12: Developer Applications / API / OAuth

* [API Documentation](http://developer.github.com)

* [OAuth](http://developer.github.com/v3/oauth/)

  ** For discounts at business-affiliated services. (Publishers like O'Reilly Atlas, Prags, Pluralsight)

  ** For automation integration like Travis-CI

  ** For sign-in to credentialing services like [CoderWall](http://coderwall.com)

  ** For sign-in to reputation services like [StackOverflow](http://stackoverflow.com)

[[chapter-clients]]
== Chapter 13: Graphical User Interfaces and Command Line Clients

* Official GUI Clients

  ** GitHub for Windows

  ** GitHub for Mac

* Unofficial GUI Clients

  ** SourceTree

  ** SmartGit

* Command Line Tools

  ** ghi

  ** hub

  ** github

  ** gist

  ** tig
