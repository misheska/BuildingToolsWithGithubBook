[[creating-account]]
== Creating a Github Account

To create an account on GitHub, just go to GitHub.com. They make it easy to sign up, with a signup form right on the front page. Enter your preferred username, your email address, and a password, and you will have created an account. GitHub is smart with their signup in that you don't need to agonize over choosing a plan when signing up. You just enter in three pieces of information, and you are a GitHub member.

GitHub does ask you to verify your email address once you have created an account. At the top of the page you'll see a notification that asks you to verify your email address. Doing so is simple: follow the link to "Emails" in your Account Settings, and then click the button "Verify." You should immediately receive an email with a link; clicking on this link takes you to a a verify button, and if you click this, you'll have verified your email address. Your GitHub account is fully functional even without doing completing this step, but verifying your email maintains a high identity integrity of users within GitHub.

=== Selecting a GitHub Plan

You are not asked to choose a plan immediately upon signing up at GitHub.com. Pricing is solely dependent on the number of private repositories you need. If you plan on contributing only open source, you might not need any private repositories. If you plan on building the next Facebook or Google, you may want to keep your source code private to protect yourself from competitors, and in this case you'll need to upgrade to a paid plan with private repositories. Plans start at $7 for the micro plan with 5 private repositories, and go up in price with more private repositories. GitHub makes it very easy to upgrade to a larger plan and add private repositories, and if you ever need to save money you can remove private repostories from your account (or open source them and make them public repositories) and downgrade your account to a smaller and cheaper plan. It is a very flexible payment structure and this simplicity is probably one of the reasons GitHub is well loved by its users. 

Sidebar: How most organizations signup for Github?

==== Types of Github Plans

GitHub plans differ in only one way: they are priced by the number of private repositories you have available. Micro plans start at $7 a month and have 5 private repositories. Small plans are $12 a month and have 10 private repositories. Medium plans have 20 private repositories and cost $22 a month. If you are working within an organization, you might consider the business plans. Business plans have a slightly higher cost with fewer repositories per dollar, but they are designed for organizational usage. This means that you can assign permissions to private repositories based on groups of users within the organization rather than individually as you would with a standard user plan. Business plans start at the bronze level with $25 a month for 10 private repositories, silver plans are $50/mo for 20 private repositories, gold plans are $100/mo for 50 private repositories, with platinum plans rounding out the list at $200 for 100 private repositories.

===== Free

It costs nothing to sign-up for a Github account and use it with your own public repositories. You can contribute to private repositories, but cannot own private repositories or create them until you upgrade to a paid plan.

===== Downgrading your plan

One day your wife comes into your office and says: "After reviewing our expenses, I am going to need you to purchase one less latte this month." One less latte! But, you are committed to living a life of financial responsibility, so you counter offer and say "How about I downgrade my GitHub account to a micro plan from my current small plan? That will save us $5!" She agrees to your counter offer and you set about figuring out how you are going to do downgrade your plan.

At first glance, you realize you might be in trouble. The micro plan has a limitation of five private repositories. You currently have nine private repositories in your GitHub account, and you believe at least seven of the projects will turn into businesses larger than Apple, Facebook and Google combined. So, you are loathe to just delete the repositories and lose all the work you have put in to building these business applications. There are two repositories which contain code that you no longer believe to be convertible into viable businesses. You need to get your private repositories down to just five in total. What to do?

For the two businesses which you no longer need to keep private, just visit the repository page, and then click the "Settings" link on the right hand sidebar. Once you are in settings, scroll all the way down to the section at the very bottom marked "Danger Zone." In there you will see a button labeled "Make Public." Clicking this button will convert this repository to a public repository. This means anyone can view the contents on GitHub.com, clone it for themselves, and even fork it to make their own copy inside GitHub. If you make two of your private repositories public, you will have only seven private repositories, that much closer to your goal of five private repositories.

image::images/creating-account-make-public.png[]

Now that you have seven private repositories, you just need to take one more step to take your account down to five repositories in total. First, simply clone two of the repositories onto your laptop or desktop computer. Remember that when you do a clone of a repository, you are cloning the entire history of this repository. If you clone the repository, therefore, you have exactly the same information on your local machine as GitHub has on their servers. You can then safely delete the repository on GitHub, knowing that you have a full copy of the code on your local machine. This means that you will need to make sure you keep a backup of this code somewhere else in case you have a hard disk failure, or lose the laptop due to theft. Normally when you are working on code that backup is GitHub, but now you'll need to find an alternative. And, if your wife ever decides that you can spend an additional $5 a month again, you can simply recreate the repository on GitHub and `git push` to publish it right back with no difference at all.

If you take these two steps of making two repositories public, and delete from GitHub two which you have backed up on your personal laptop, you'll be down to five private repositories. And, you can then switch your plan down to the micro plan. You'll likely find that spending a few extra dollars a month is well worth it for the piece of mind that your precious code will be kept safe, but if your partner can't be convinced of the expense, then GitHub makes it easy to go up and down plan levels.

===== Personal

Once you start creating private repositories, you'll need a personal plan.

===== Organization

You can invite people to any private repository as long as they are members of GitHub, paid or unpaid. However, if you want to make them owners of the repository, or you want to institute team based permissions for access on any public or private repositories then you will need to migrate to a business plan.

==== Choosing the Right Plan

Figure: A Decision Tree for What Plan to Choose

===== Open Source Development

If you are only contributing to open source projects, you can probably
get by with a Free plan.

===== Small Project Development

Small teams of less than 10 people working as individuals are best
served by personal plans.

===== Startups, Small to Medium Businesses

Once a company starts to depend on Github for coding and collaboration
it will make sense to use an Organziation plan.

===== Enterprise-scale Development

If you have hundreds or thousands of developers, you may not want to
use either of these plans.  In these situations, Github offers a
service called Github Enterprise.

=== Setting Up Your Accounts

If you are new to Github, this section has been designed to walk you
through the process of setting up an account.

==== User Accounts versus Organization Accounts

The previous section goes into detail where to start

==== Signing up for your User Account

How to sign up for an individual user account.

==== Setting up an Organization Account

How to sign up for an organizational account.

=== Exploring Account Security

==== Reseting Your Password

Simple screenshot and instructions.

==== Using 2 Factor Authentication

When and why to use 2 Factor authentication.

==== SSH vs HTTPS

There are two transport options for loading code from GitHub: SSH and HTTPS.

Actually, at the time of this writing there are really three protocols: SSH, 
HTTPS and Subversion. Subversion is there for backwards compatibility with older 
workflows, and actually just maps the SVN protocol on top of Git. The only reason
you would use Subversion with GitHub is that you work in an organization that
requires use of Subversion but also wants to host their code on GitHub. If you work
for such an schizophrenic organization, you might want to start looking for another job right 
away.

Both HTTPS and SSH operate over a secure encrypted channel, but beyond this commonality 
there are very different reasons for using each.

Of the two, SSH is the best option. Whenever you can, use SSH.

===== HTTPS

The only reason you might prefer HTTPS is that this protocol can be useful if you are
inside a very restrictive firewall.
HTTPS traffic is almost always permitted (port 443 is a common "secure" port on almost 
any firewall). If you use HTTPS, the "git clone" command will use a URL which starts 
with https://. For example, to load the Ruby on Rails repository from GitHub you would 
use the command "git clone https://github.com/rails/rails.git".

===== HTTPS Downsides

When you use the HTTPS protocol, note that you will need to enter in
your password to authenticate. The command line git client (which might be what your
editor is using underneath the graphical interface you use to code) does not
have an ability to cache this password. This means each time you push code, or pull 
the latest changes, you will need to re-enter your password. Git is a protocol which 
supports making lots of little changes, so a requirement that you must add another ten 
seconds to your workflow makes HTTPS quickly unusable. GitHub has released a Ruby gem called "hub"
which you can alias so that you actually use the ruby gem client instead of the native 
command line client; this ruby gem client can cache and use HTTPS passwords. But, this requires
additional setup, convolutes your workflow, and SSH still offers more benefits. 

HTTPS is also a less efficient protocol for transferring files; cloning and interacting with 
repositories using HTTPS is slower for you. 

The only real benefit for HTTPS is for server administrators: it 
is easier to configure a server to provide HTTPS to git repositories than it is to provide those
repositories over SSH. GitHub is doing the work of hosting your git repositories for you, however, so this is not a compelling reason to consider HTTPS.

===== SSH 

SSH offers the same level of security but is much more convenient, more flexible and 
keeps access more secure. You will notice that GitHub offers SSH as the default protocol.

At the center of SSH is a concept called asymmetric cryptography also called 
public key cryptography. To use SSH you generate a public/private keypair. Then, you 
upload the public key into GitHub. You keep the private key on your machine, and 
you keep it private (meaning, don't send it over email, or post it on Facebook).

===== A brief tutorial on using SSH keys

If using SSH sounds complicated, don't fret. To generate a public/private keypair, 
you just need to run this command from a terminal:

[source,bash]
$ ssh-keygen 
Generating public/private rsa key pair.
Enter file in which to save the key (/Users/xrdawson/.ssh/id_rsa): 
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 

This generates two files, a file called ~/.ssh/id_rsa and another called ~/.ssh/id_rsa.pub. 
The first file is the private file and the second (ending with a suffix abbreviation of the word "public") is the public file. 

You will be asked if you want to enter a passphrase which protects usage of your keypair. If
you believe your machine is secure (for example, this is a laptop which uses fingerprint 
recognition to unlock the screen), then you can hit enter and not protect your private key
with a passphrase. If the key is sitting in a less secure position, such as a server on the 
Internet, then you might want to protect the key with a passphrase. If you lose the passphrase, 
you cannot use the key. However, replacing a key is an easy problem to rectify.

===== Putting your SSH public key on GitHub 

To store an SSH public key on GitHub, copy the key contents into your clipboard. On an OSX machine, you 
could use this command:

[source,bash]
$ cat ~/.ssh/id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDG56LecqP2ip/odHzAkM3F/TyL5TjS0m6bNEo3p+m7KEU/eJ+ZvrF1/4ALPk59+Ca2NtOwewVs1RZNuV9BuMesTHFAxev6Zx4R56fwL45UuDm1gjpwevxwHe8aS0elek94OcgxYomnnnmB4Og/OIbVYICfaQ4VhE+xVVOF/TXIGkndZG/wBLFg9QwPTQKhOIgVDoTzdj0FZ9qXfhvc7AhGkeOAO+dyeNgfk8ghzRPqyztd14tq6gOVPAMce3mGQsugbcKxgRBbd/7VaWT5hQl5YVtLlcAvM1gHgvU8MNVhrJTKzZxlTNBVBnYy1QxPtB3LF25YL7jAjtMYkuEjmZff xrdawson@Chriss-MacBook-Pro-2.local

Select everything from the "ssh-rsa" to and including the "xrdawson@Chriss-MacBook-Pro-2.local" (which is the name of my MacBook Pro) and then copy it to your clipboard. Then, go to GitHub, click on the "Account Settings" button:

image::images/account-settings.png[]

Then, click on the "SSH" item in the navigation bar on the left. You'll see a list of SSH keys already in the system. You might not have any if you just setup your account. In my account, I have many SSH keys.

image::images/ssh-keylist.png[]

As you can see, I have a key for my OSX Laptop. I have another key for an Ubuntu server I manage, a server which has a user which has access to my repositories. Then, I have another server, this time running on Amazon Web Services, which also has access to my repositories. I have an Android device which has access, as well as a Chromebook running developer mode that has access to my GitHub repositories. Finally, I have a virtual machine (using Vagrant) on my OSX laptop, and this machine has its own access. 

To add your key, click on the "Add SSH Key" button at the very top right of the list of SSH keys. This action will open a form underneath into which you can choose a title for the SSH key and then the contents which you copied to the clipboard. Once the form looks something like this you can click the "Add Key" button.

image::images/ssh-add-key.png[]

===== The big reason why SSH trumps HTTPS

If you takeaway one thing about why SSH is better than HTTPS, let it be this: both HTTPS and SSH make
it easy to add access to your repositories. However, HTTPS makes it really hard to revoke that
access.

With HTTPS managing and securing access to your repository becomes *your* problem. With SSH, 
secure access is *GitHub's* problem. And, they've been thinking about the right ways to do this: 
from requiring re-entry of your password whenever a new SSH public key is added, 
to 2 factor authentication (utilizing email and your cell phone to verify your identity), GitHub has spent lots of time and money making sure your source code is protected from rogue access.
