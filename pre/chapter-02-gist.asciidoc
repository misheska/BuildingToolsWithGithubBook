== Gists

Gists are great for code sharing. To create one, you can go to gist.github.com and enter in some code. You 
then choose public or private and create the gist.

=== Gists are repositories

Every gist created is a tiny repository. You can update gists and see
the history.

You can have an unlimited number of public and private gists.

=== No real privacy

Remember that there are two types of gists: 
Public gists are searchable. Private gists are not searchable, but
they are accessible to anyone who knows the URL. Don't post any code to gist which you need to keep private
as once you put it there, it is only as a safe as the URL is private. 

=== Gists as fully functioning apps

You can use gists to store entire apps. Let's create a
simple Sinatra app.

Sinatra is a ruby library for creating dead-simple web servers. A sinatra program looks as
simple as this:

[code,ruby]
-----
[filename=".", language="js", sha="499e56c:support/gists/hi.rb"]
snippet~~~~~
To be replaced
snippet~~~~~
-----

Create a gist for this by visiting gist.github.com. Enter in the text exactly as above and then choose
public gist.

You now have a shareable gist of code, which anyone can use to review this code. More importantly, this
is an executable piece of code. To use it, click into the "Clone this gist" box to the left of the body of 
content. You'll get a URL which looks something like this:

https://gist.github.com/8138797.git

Copy this and then enter a terminal program and enter this command:

[source,bash]
$ git clone https://gist.github.com/8138797.git
$ cd 8138797

Now, you are inside the gist repository. If you look inside the repository you'll see a list of files, which 
right now numbers only one.

[source,bash]
----
$ ls
hi.rb
----

To run this code, enter `ruby hi.rb`

If you had not used sinatra with ruby before, this will cause an
error. This program requires a library called "sinatra" and 
you have not yet installed it. We could write a README, or add
documentation into this file itself. Another 
way to guarantee the user has the proper files installed is to use a
"Gemfile" which is a file that tells 
which libraries are installed and from where. Let's add this:

[source,bash]
$ printf "source 'https://rubygems.org'\ngem 'sinatra'" > Gemfile

This is a quick way to add content to the file named Gemfile. To install the libraries required here, we run
the bundler command

[source,bash]
$ bundle
Using rack (1.5.2) 
Using rack-protection (1.5.1) 
Using tilt (1.4.1) 
Using sinatra (1.4.4) 
Using bundler (1.3.5) 
Your bundle is complete!
Use `bundle show [gemname]` to see where a bundled gem is installed.

This shows that we installed the library "sinatra" and the associated dependencies (rack, tilt and other associated
libraries). 

Why did we do things this way? Because now we can add this file to our repository locally, and then publish
into our gist for sharing on the web.

First, we need to update the "remote". Run this command:

[source,bash]
-----
$ git remote -v
origin       https://gist.github.com/8138797.git (fetch)
origin       https://gist.github.com/8138797.git (push)
-----

Your results will be slightly different, but this output displays our
remote repository; in other words, where we pull and push our code
changes. If you are familiar with the way 
that remotes work on GitHub you can see that this is a read-only URL.
We need to adjust these URLs in our remote so that it points to the
read-write remote URL. To do that, remove the `https://` part and add
a `git@`. Then, change the first `/` character after the
`gist.github.com` URL to a `:` character. If your remote was the same
as above you would have this `git@gist.github.com:8138797.git`. Then,
in a terminal window run these commands:

[source,bash]
----
$ git remote rm origin
$ git remote add origin git@gist.github.com:8138797.git
----

Now you can push new content in via the command line as well as edit
files inside of GitHub.com. As you develop your app you have
flexibility in whichever way fits you best.

=== A gist that displays gists

Let's add to our application and use the octokit gem to pull all
public gists for any user we specify.

Add a view `index.erb` at the root of our directory.

[code,ruby]
-----
[filename=".", language="js", sha="c80e5fe:support/gists/index.erb"]
snippet~~~~~
To be replaced
snippet~~~~~
-----

Add the octokit gem to our Gemfile:

[source,ruby]
-----
gem "octokit"
-----

Run `bundle` to install octokit. Then, modify our hi.rb app to look
like this:

[code,ruby]
-----
[filename=".", language="js", sha="bd1422c:support/gists/hi.rb"]
snippet~~~~~
To be replaced
snippet~~~~~
-----

Our filesystem should look like this, with three files.

[source,bash]
-----
$ ls -1
Gemfile
hi.rb
index.erb
-----

Run `bundle` to install octokit and restart Sinatra by running ctrl-c,
and then `ruby hi.rb`. If you visit `http://localhost:4567/xrd` in
your browser, you will see the public gists for any user you specify.

image::images/gists-gist-count.png[]

=== Embedding Gists

You can embed gists as shareable code snippets inside of blogs or any
web page.

==== Inside HTML pages

==== Inside Jekyll blogs

You can use the code `{% gist 8138797 %}` to embed a gist inside of your
Jekyll blog. 

If you want to use a specific file within the gist, add a filename to
the gist code like `{% gist 8138797 hi.rb %}`.

Private gists can be embedded. If you use a private gist, you need to
prefix the username of the account holder in the gist like so: `{% gist
xrd/8138797 hi.rb %}`.



=== Discovering Gists

Gists can be searched, but the interface is much simpler than the
interface for the search interface discussed previously in this
chapter.  To get the Gists search feature, go to
https://gist.github.com/search - type in a search term and the only
filtering function you'll be able to see is a filter by Gist language.

image::images/explore-search-gists.png[]

